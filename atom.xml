<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aurora-wangq.github.io/</id>
    <title>Aurora</title>
    <updated>2020-10-17T07:23:32.248Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://aurora-wangq.github.io/"/>
    <link rel="self" href="https://aurora-wangq.github.io/atom.xml"/>
    <subtitle>WQJ_POR</subtitle>
    <logo>https://aurora-wangq.github.io/images/avatar.png</logo>
    <icon>https://aurora-wangq.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Aurora</rights>
    <entry>
        <title type="html"><![CDATA[[模板]大根堆]]></title>
        <id>https://aurora-wangq.github.io/post/mo-ban-da-gen-dui/</id>
        <link href="https://aurora-wangq.github.io/post/mo-ban-da-gen-dui/">
        </link>
        <updated>2020-10-15T10:48:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#include &lt;iostream&gt;

//堆长度
int heapsize;
 
//大顶堆化
void MAX_HEAPIFY(int A[], int i)
{
	int l = 2 * i;		//把 i 的左儿子 下标 赋给l
	int r = 2 * i + 1;		//把 i 的左儿子 下标 赋给r
	int largest;	//3个里面最大的下标
 
	if (l &lt;= heapsize &amp;&amp; A[l]&gt;A[i])
		largest = l;
	else
		largest = i;
 
	if (r &lt;= heapsize &amp;&amp; A[r]&gt;A[largest])
		largest = r;
 
	if (largest != i)
	{
		//交换 A[largest] 和 A[i]
		int tmp = A[largest];
		A[largest] = A[i];
		A[i] = tmp;
 
		MAX_HEAPIFY(A, largest);
	}
}
 
//建堆
void BUILD_MAX_HEAP(int A[])
{
	int i;
	for (i = (int)(heapsize / 2); i &gt;= 1; i--) {
		MAX_HEAPIFY(A, i);
		for (int j = 1; j &lt;= 10; j++)
			printf(&quot;%d &quot;, A[j]);
		printf(&quot;\n&quot;);
	}
}
 
//堆排序
void HEAPSORT(int A[])
{
	BUILD_MAX_HEAP(A);		//ok
 
	int i;
	int tmp;
	for (i = heapsize; i &gt;= 2; i--)		//A[1] 必定是最大的
	{
		//交换 A[1] 和 A[i]
		tmp = A[1];
		A[1] = A[i];
		A[i] = tmp;
 
		heapsize--;
		MAX_HEAPIFY(A, 1);
	}
}
 
int main()
{
	int A[11] = { 0, 5, 3, 2, 1, 4, 6, 9, 7, 8, 10 };
	//ok
	int n = sizeof(A) / sizeof(int) - 1;
	heapsize = n;
 
	HEAPSORT(A);
 
	for (int i = 1; i &lt;= n; i++)
		printf(&quot;%d &quot;, A[i]);
 
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>